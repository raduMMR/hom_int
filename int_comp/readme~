Drepturi de autor
-----------------
	Aceasta biblioteca care implementeaza comparatia homomorfica a intregilor
si gasirea maximului dintr-un vector de numere intregi criptate
foloseste structura si ideile bibliotecii de comparatii homomorfice si selectie a maximului
asa cum este ea descrisa aici
http://www.acad.ro/sectii2002/proceedings/doc2015-3s/08-Togan.pdf.

	Pentru partea de implementare a schemei de criptare homomorfice bazate pe NTRU biblioteca de
fata foloseste biblioteca care asa cum este descrisa aici https://eprint.iacr.org/2014/039.pdf
si poate fi descarcata de aici
http://ecewp.ece.wpi.edu/wordpress/vernam/projects/source-codes/homomorphic-aes-evaluation-using-ltv/



Dependinte
----------
	Biblioteca NTL 6.0 (pentru versiunile mai noi nu compileaza
	pentru ca au fost inlocuite niste functii).
	Biblioteca gmp 5.1.3. 


Utilizare:
------------
	pentru Setup asigurati-va ca din functia main apelati doar functia KeyGenOut()
	rulati comanda make in directorul NTRU_COMP pentru generarea cheilor
	
	comentati apelul functiei KeyGenOut() din fisierul main.cpp
	si decomentati functia pe care doriti sa o testati
	rulati din nou comanda make
	
	
Organizare cod
----------------
	- clasa CtxtBit reprezinta echivalentul clasei CtxtPart din biblioteca
	HElib, adica criptare unui bit si imi pune la dispoztie metodele matematice 
	de adunare si inmultire homomorfica a bitilor
	
	- clasa HE_Integer si-a pastrat functionalitatile de criptare/decriptare
	pentru intregi si vectori de intregi dar am eliminat metodele corespunzatoare
	pentru biti intrucat am introdus clasa de mai sus
	
	- test_comparison.h - cateva functii in care testez biblioteca ntru pentru
	a afla adancimea maxima multiplicativa, a verifica corectitudinea comparatiilor
	(inca am bug-uri aici)
	
	
	
Probleme intampinate
--------------------
	Utilizarea bibliotecii nu este atat de intuitiva pe cat am crezut.
	
ex. pentru multiplicare m-am asteptat ca dupa fiecare astfel de operatie
sa elimin un nivel de pe "scara" de moduli. Am testat acest lucru si nu 
am obtinut decriptarea corecta. In schimb daca pastrez parametrul pe
care il transmit la efectuarea operatiilor corespunzator nivelului este 0
pot efectua un numar de 89 de multiplicari fara eroare la decriptare.
	Totusi, trebuie sa insist aici pentru ca bug-urile pe care le am
la comparatii ar putea proveni chiar de aici.

 // ... cum m-as fi asteptat sa folosesc biblioteca
	result= ntru_context->MulModZZX(result, c0, level);
	result = ntru_context->Relin(result, level);
	ntru_context->ModSwitch(result, level);
	
	level++;
	
	result= ntru_context->MulModZZX(result, c0, level);
	result = ntru_context->Relin(result, level);
	ntru_context->ModSwitch(result, level);
	
	level++;
	
// ...

// ... cum "functioneaza" 

	result= ntru_context->MulModZZX(result, c0, 0);
	result = ntru_context->Relin(result, 0);
	ntru_context->ModSwitch(result, 0);
	
	result= ntru_context->MulModZZX(result, c0, 0);
	result = ntru_context->Relin(result, 0);
	ntru_context->ModSwitch(result, 0);

	ntru_context->Decrypt(result, 1); 
// ...




	
	
