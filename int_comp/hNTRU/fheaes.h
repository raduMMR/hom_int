#ifndef FHEAES_H_
#define FHEAES_H_

#include "def.h"
#include "ntru.h"
#include "crt.h"
#include "fft_mult.h"
#include "general.h"

class FheAES{
public:
	FheAES();
	void LTVKeySetUp();
	void SetMessageBits(unsigned char *mess);
	void SetKeys();
	void EncryptMessage();
	void AESEncryption();
	void AESSBox(ZZX *bits_out, ZZX *bits_in);
	void FHEAESShiftRows();
	void FHEAESMixColumns();
	void RelinBits(ZZX *bits, int num);
	void ModSwitchBits(ZZX *bits, int num);
	int num_mul, num_relin;

private:
	ntru *n;
	myCRT c;
	int qIndex;
	ZZX Bits[128];
	ZZX RoundKeys[11][128];



//////////////////////////////////////////////////////////////////

	void Inv(ZZX &bits_out, ZZX &bits_in);
	void Add(ZZX &bits_out, ZZX &bits_in0, ZZX &bits_in1);
	void Mul(ZZX &bits_out, ZZX &bits_in0, ZZX &bits_in1);

	void GF28Inv(ZZX *bits_out, ZZX *bits_in);
	void GF2Add(ZZX *bits_out, ZZX *bits_in0, ZZX *bits_in1);
	void GF2Add(ZZX *bits_out, ZZX *bits_in0, ZZX *bits_in1, int num);

	void GF24Mul(ZZX* bits_out, ZZX* bits_in0, ZZX* bits_in1);
	void GF22Mul(ZZX* bits_out, ZZX* bits_in0, ZZX *bits_in1);

	void GF22Sqr(ZZX* bits_out,ZZX* bits_in);
	void GF22N(ZZX* bits_out, ZZX* bits_in);
	void GF24NSqr(ZZX* bits_out, ZZX* bits_in);
	void GF24Inv(ZZX* out, ZZX* in);
	void GF22Inv(ZZX* out, ZZX* in);

	void MatrixMultiply(ZZX *out, ZZX *in, const unsigned char a[][8]);
	void Copy(ZZX *out, ZZX *in, int num);
	void VectorMultiply(ZZX &out, ZZX* in, const unsigned char* a);

	void GF2VectorMultiply(ZZX* out, ZZX* a , const unsigned char* b);
	void GF2MultiplyConst(ZZX* out, ZZX* a , const unsigned char b);

	void Char2ZZX(const unsigned char *c, ZZX *k);
	void AddRoundKey(int num);
	void ShowRoundResult(int r);
};

void Copy(ZZX &out, ZZX &in);
void Print(ZZX *c, int num);
void PrintChar(ZZX *tt, int num);

////////////////////////////////////////////////////////////////////

const unsigned char InvX[8][8] = {
	{1,1,1,0,0,1,1,1},
	{0,1,1,1,0,0,0,1},
	{0,1,1,0,0,0,1,1},
	{1,1,1,0,0,0,0,1},
	{1,0,0,1,1,0,1,1},
	{0,0,0,0,0,0,0,1},
	{0,1,1,0,0,0,0,1},
	{0,1,0,0,1,1,1,1}};

const unsigned char MX[8][8] = {
	{0,0,1,0,1,0,0,0},
	{1,0,0,0,1,0,0,0},
	{0,1,0,0,0,0,0,1},
	{1,0,1,0,1,0,0,0},
	{1,1,1,1,1,0,0,0},
	{0,1,1,0,1,1,0,1},
	{0,0,1,1,0,0,1,0},
	{0,1,0,1,0,0,1,0}};

const unsigned char MixCol[4][4] = {
{2,3,1,1},
{1,2,3,1},
{1,1,2,3},
{3,1,1,2}};

////////////////////////////////////////////////////////
const unsigned char key_rounds[11][16] = {
		//STG 0//
		{
		0x00, 0x04, 0x08, 0x0C,
		0x01, 0x05, 0x09, 0x0D,
		0x02, 0x06, 0x0A, 0x0E,
		0x03, 0x07, 0x0B, 0x0F},

		//STG 1//
		{
		0xD6, 0xD2, 0xDA, 0xD6,
		0xAA, 0xAF, 0xA6, 0xAB,
		0x74, 0x72, 0x78, 0x76,
		0xFD, 0xFA, 0xF1, 0xFE},

		//STG 2//
		{
		0xB6, 0x64, 0xBE, 0x68,
		0x92, 0x3D, 0x9B, 0x30,
		0xCF, 0xBD, 0xC5, 0xB3,
		0x0B, 0xF1, 0x00, 0xFE},

		//STG 3//
		{
		0xB6, 0xD2, 0x6C, 0x04,
		0xFF, 0xC2, 0x59, 0x69,
		0x74, 0xC9, 0x0C, 0xBF,
		0x4E, 0xBF, 0xBF, 0x41},

		//STG 4//
		{
		0x47, 0x95, 0xF9, 0xFD,
		0xF7, 0x35, 0x6C, 0x05,
		0xF7, 0x3E, 0x32, 0x8D,
		0xBC, 0x03, 0xBC, 0xFD},

		//STG 5//
		{
		0x3C, 0xA9, 0x50, 0xAD,
		0xAA, 0x9F, 0xF3, 0xF6,
		0xA3, 0x9D, 0xAF, 0x22,
		0xE8, 0xEB, 0x57, 0xAA},

		//STG 6//
		{
		0x5E, 0xF7, 0xA7, 0x0A,
		0x39, 0xA6, 0x55, 0xA3,
		0x0F, 0x92, 0x3D, 0x1F,
		0x7D, 0x96, 0xC1, 0x6B},

		//STG 7//
		{
		0x14, 0xE3, 0x44, 0x4E,
		0xF9, 0x5F, 0x0A, 0xA9,
		0x70, 0xE2, 0xDF, 0xC0,
		0x1A, 0x8C, 0x4D, 0x26},

		//STG 8//
		{
		0x47, 0xA4, 0xE0, 0xAE,
		0x43, 0x1C, 0x16, 0xBF,
		0x87, 0x65, 0xBA, 0x7A,
		0x35, 0xB9, 0xF4, 0xD2},

		//STG 9//
		{
		0x54, 0xF0, 0x10, 0xBE,
		0x99, 0x85, 0x93, 0x2C,
		0x32, 0x57, 0xED, 0x97,
		0xD1, 0x68, 0x9C, 0x4E},

		//STG 10//
		{
		0x13, 0xE3, 0xF3, 0x4D,
		0x11, 0x94, 0x07, 0x2B,
		0x1D, 0x4A, 0xA7, 0x30,
		0x7F, 0x17, 0x8B, 0xC5}

};

const unsigned char result_rounds[10][16] = {
{
0x89, 0xD8, 0x10, 0xE8,
0x85, 0x5A, 0xCE, 0x68,
0x2D, 0x18, 0x43, 0xD8,
0xCB, 0x12, 0x8F, 0xE4},

{
0x49, 0x15, 0x59, 0x8F,
0x55, 0xE5, 0xD7, 0xA0,
0xDA, 0xCA, 0x94, 0xFA,
0x1F, 0x0A, 0x63, 0xF7},

{
0xFA, 0x63, 0x6A, 0x28,
0x25, 0xB3, 0x39, 0xC9,
0x40, 0x66, 0x8A, 0x31,
0x57, 0x24, 0x4D, 0x17},

{
0x24, 0x72, 0x40, 0x23,
0x69, 0x66, 0xB3, 0xFA,
0x6E, 0xD2, 0x75, 0x32,
0x88, 0x42, 0x5B, 0x6C},

{
0xC8, 0x16, 0x77, 0xBC,
0x9B, 0x7A, 0xC9, 0x3B,
0x25, 0x02, 0x79, 0x92,
0xB0, 0x26, 0x19, 0x96},

{
0xC6, 0x2F, 0xE1, 0x09,
0xF7, 0x5E, 0xED, 0xC3,
0xCC, 0x79, 0x39, 0x5D,
0x84, 0xF9, 0xCF, 0x5D},

{
0xD1, 0x87, 0x6C, 0x0F,
0x79, 0xC4, 0x30, 0x0A,
0xB4, 0x55, 0x94, 0xAD,
0xD6, 0x6F, 0xF4, 0x1F},

{
0xFD, 0xE3, 0xBA, 0xD2,
0x05, 0xE5, 0xD0, 0xD7,
0x35, 0x47, 0x96, 0x4E,
0xF1, 0xFE, 0x37, 0xF1},

{
0xBD, 0x6E, 0x7C, 0x3D,
0xF2, 0xB5, 0x77, 0x9E,
0x0B, 0x61, 0x21, 0x6E,
0x8B, 0x10, 0xB6, 0x89},

{
0x69, 0xC4, 0xE0, 0xD8,
0x6A, 0x7B, 0x04, 0x30,
0xD8, 0xCD, 0xB7, 0x80,
0x70, 0xB4, 0xC5, 0x5A},

};

#endif

























